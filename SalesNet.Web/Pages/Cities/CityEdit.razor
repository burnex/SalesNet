@page "/cities/edit/{Id:int}"
@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService sweetAlertService


<h3>Editar Ciudad</h3>

@if (city is null)
{
    <p>Cargando...</p>
}
else
{
    <CityForm @ref="cityForm" City="city" OnValidSubmit="EditAsync" ReturnAction="Return" />
}

@code{
    private City? city;
    private CityForm? cityForm;

    [Parameter]
    public int Id { get; set; }

    private int IdCountry { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var responseHTTP = await repository.Get<City>($"api/cities/{Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("states");
            }
            else
            {
                var messageError = await responseHTTP.GetErrorMessageAsync();
                await sweetAlertService.FireAsync("Error", messageError, SweetAlertIcon.Error);
            }
        }
        else
        {
            city = responseHTTP.Response;
        }
    }

    private async Task EditAsync()
    {
        var responseHTTP = await repository.Put("api/cities", city);

        if (responseHTTP.Error)
        {
            var mensajeError = await responseHTTP.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            return;
        }
        Return();
    }

    private void Return()
    {
        cityForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo($"/states/details/{city!.StateId}");
    }
}
